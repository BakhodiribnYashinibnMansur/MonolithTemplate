// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const countAccount = `-- name: CountAccount :one
SELECT count(*) FROM "account"
`

func (q *Queries) CountAccount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAccount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO "account" (full_name, phone_number, birthday_date) VALUES ($1, $2, $3)
`

type CreateAccountParams struct {
	FullName     string    `json:"full_name"`
	PhoneNumber  string    `json:"phone_number"`
	BirthdayDate time.Time `json:"birthday_date"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.Exec(ctx, createAccount, arg.FullName, arg.PhoneNumber, arg.BirthdayDate)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM "account" WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccountByName = `-- name: GetAccountByName :one
SELECT id, full_name, birthday_date, added_date, role, phone_number, password, created_at, updated_at, deleted_at FROM "account" WHERE phone_number = $1
`

func (q *Queries) GetAccountByName(ctx context.Context, phoneNumber string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByName, phoneNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthdayDate,
		&i.AddedDate,
		&i.Role,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccountGyId = `-- name: GetAccountGyId :one
SELECT id, full_name, birthday_date, added_date, role, phone_number, password, created_at, updated_at, deleted_at FROM "account" WHERE id = $1
`

func (q *Queries) GetAccountGyId(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountGyId, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.BirthdayDate,
		&i.AddedDate,
		&i.Role,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteAccount = `-- name: HardDeleteAccount :exec
DELETE FROM "account" WHERE id = $1
`

func (q *Queries) HardDeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, hardDeleteAccount, id)
	return err
}

const listUser = `-- name: ListUser :many
SELECT id, full_name, birthday_date, added_date, role, phone_number, password, created_at, updated_at, deleted_at FROM "account"
`

func (q *Queries) ListUser(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.BirthdayDate,
			&i.AddedDate,
			&i.Role,
			&i.PhoneNumber,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAccount = `-- name: SoftDeleteAccount :exec
UPDATE "account" SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteAccount(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, softDeleteAccount, id)
	return err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE "account" SET full_name = $2, phone_number = $3, birthday_date = $4 WHERE id = $1
`

type UpdateAccountParams struct {
	ID           string    `json:"id"`
	FullName     string    `json:"full_name"`
	PhoneNumber  string    `json:"phone_number"`
	BirthdayDate time.Time `json:"birthday_date"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount,
		arg.ID,
		arg.FullName,
		arg.PhoneNumber,
		arg.BirthdayDate,
	)
	return err
}
